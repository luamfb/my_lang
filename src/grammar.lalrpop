use crate::{
    ast::*,
    lexer::Token,
};

grammar<'input>(input: &'input str);

// Taken directly from LALRPOP book's `Comma` macro.
comma<T> : Vec<T> = {
    <mut v:(<T> COMMA)*> <last:T?> => match last {
        None => v,
        Some(last) => {
            v.push(last);
            v
        }
    }
};

pub Stmt : Stmt<'input> = {
    <type_spec> <comma<(<ID> <(ASSIGN <Expr>)?>)>> SEMI => Stmt::VarDecl(<>),
    RET <Expr> SEMI                     => Stmt::Ret(<>),
    <fn_call> SEMI                      => Stmt::Call(<>),
    <assign_like> SEMI                  => Stmt::AssignLike(<>),
    IF <expr0> <body> <opt_else>        => Stmt::Branch(<>),

    FOR <ID> IN <Expr> <body>           => Stmt::ForEach(<>),
    FOR <assign_like> SEMI <Expr> SEMI <assign_like> <body>
        => Stmt::CLikeFor(<>),

    WHILE <c:expr0> <b:body>            => Stmt::Loop(LoopKind::While, c, b),
    UNTIL <c:expr0> <b:body>            => Stmt::Loop(LoopKind::Until, c, b),
    DO <b:body> WHILE <c:expr0> SEMI    => Stmt::Loop(LoopKind::DoWhile, c, b),
    DO <b:body> UNTIL <c:expr0> SEMI    => Stmt::Loop(LoopKind::DoUntil, c, b),
};

opt_else : Vec<Stmt<'input>> = <b:(ELSE <body>)?> => b.unwrap_or(vec![]);

// Can be either a full statement (if on its own, and followed by a semicolon)
// or part of a C-like `for`.
assign_like : AssignLike<'input> = {
    <(<ID> ASSIGN)+> <Expr>     => AssignLike::Assign(<>),
    <ID> <compound_oper> <Expr> => AssignLike::Compound(<>),
    <ID> INCR                   => AssignLike::Incr(<>),
    <ID> DECR                   => AssignLike::Decr(<>),
};

body : Vec<Stmt<'input>> = "{" <Stmt*> "}";

type_spec = basic_type;

basic_type : BasicType = {
    INT     => BasicType::Int,
    UINT    => BasicType::Uint,
    BOOL    => BasicType::Bool,
    BYTE    => BasicType::Byte,
    FLOAT   => BasicType::Float,
    DOUBLE  => BasicType::Double,
};

// Taken directly from LALRPOP book's `Tier` macro.
// Meant for left-to-right associative, binary operators.
//
expr_tier<oper, higher_prec> : Expr<'input> = {
    <lhs:expr_tier<oper, higher_prec>> <op:oper> <rhs:higher_prec> =>
        Expr::BinOp(Box::new(lhs), op, Box::new(rhs)),
    higher_prec,
};

pub Expr : Expr<'input> = {
    <val:expr0> <ter:ternary_tail?> => match ter {
        None => val,
        Some((cond, else_val)) => Expr::Ternary {
            cond,
            if_val: Box::new(val),
            else_val,
        },
    }
};

ternary_tail : (Box<Expr<'input>>, Box<Expr<'input>>)
    = IF <cond:expr0> ELSE <else_val:expr0>
    => (Box::new(cond), Box::new(else_val));

expr0   = expr_tier<oper0, expr1>;
expr1   = expr_tier<oper1, expr2>;
expr2   = expr_tier<oper2, expr3>;
expr3   = expr_tier<oper3, expr4>;
expr4   = expr_tier<oper4, expr5>;
expr5   = expr_tier<oper5, expr6>;
expr6   = expr_tier<oper6, expr7>;
expr7   = expr_tier<oper7, expr8>;
expr8   = expr_tier<oper8, expr9>;
expr9   = expr_tier<oper9, expr10>;

expr10 : Expr<'input> = {
    <op:unary_oper> <val:expr_highest> => Expr::UnOp(Box::new(val), op),
    expr_highest,
};

fn_call : FnCall<'input> = <ID> "(" <comma<Expr>> ")" => FnCall::new(<>);

expr_highest : Expr<'input> = {
    ID      => Expr::Id(<>),
    literal => Expr::Lit(<>),
    fn_call => Expr::Call(<>),
    "(" <expr0> ")",
};

// note: operators are numbered from lowest to highest precedence
oper0 : BinaryOper = OR => BinaryOper::Or;
oper1 : BinaryOper = AND => BinaryOper::And;

oper2 : BinaryOper = {
    EQUALS      => BinaryOper::Equals,
    NOT_EQUALS  => BinaryOper::NotEquals,
};

oper3 : BinaryOper = {
    LESS        => BinaryOper::Less,
    LESS_EQ     => BinaryOper::LessEq,
    GREATER     => BinaryOper::Greater,
    GREATER_EQ  => BinaryOper::GreaterEq,
};

// Note: unlike C, we give bitwise operators higher precedence than
// comparison operators.
//
oper4 : BinaryOper = BIT_OR     => BinaryOper::BitOr;
oper5 : BinaryOper = BIT_XOR    => BinaryOper::BitXor;
oper6 : BinaryOper = BIT_AND    => BinaryOper::BitAnd;

oper7 : BinaryOper = {
    SHIFT_LEFT  => BinaryOper::ShiftLeft,
    SHIFT_RIGHT => BinaryOper::ShiftRight,
};

oper8 : BinaryOper = {
    PLUS    => BinaryOper::Add,
    MINUS   => BinaryOper::Sub,
};

oper9 : BinaryOper = {
    MULT    => BinaryOper::Mul,
    DIV     => BinaryOper::Div,
    REM     => BinaryOper::Rem,
};

unary_oper : UnaryOper = {
    NOT     => UnaryOper::Not,
    BIT_NOT => UnaryOper::BitNot,
    PLUS    => UnaryOper::Plus,
    MINUS   => UnaryOper::Minus,
};

compound_oper : CompoundOper = {
    ADD_ASSIGN          => CompoundOper::AddAssign,
    SUB_ASSIGN          => CompoundOper::SubAssign,
    MUL_ASSIGN          => CompoundOper::MulAssign,
    DIV_ASSIGN          => CompoundOper::DivAssign,
    REM_ASSIGN          => CompoundOper::RemAssign,
    BIT_AND_ASSIGN      => CompoundOper::BitAndAssign,
    BIT_OR_ASSIGN       => CompoundOper::BitOrAssign,
    BIT_XOR_ASSIGN      => CompoundOper::BitXorAssign,
    SHIFT_LEFT_ASSIGN   => CompoundOper::ShiftLeftAssign,
    SHIFT_RIGHT_ASSIGN  => CompoundOper::ShiftRightAssign,
}

literal : Literal<'input> = {
    STR_LIT     => Literal::Str(<>),
    DEC_NUM     => Literal::Dec(<>),
    DEC_DOT_NUM => Literal::DecDot(<>),
    HEX_NUM     => Literal::Hex(<>),
    BIN_NUM     => Literal::Bin(<>),
    OCT_NUM     => Literal::Oct(<>),
    TRUE        => Literal::Bool(true),
    FALSE       => Literal::Bool(false),
};

extern {
    type Location = usize;
    type Error = ();
    enum Token<'input> {
        ID                  => Token::Id(<&'input str>),
        STR_LIT             => Token::StrLit(<&'input str>),

        DEC_NUM             => Token::DecNum(<&'input str>),
        DEC_DOT_NUM         => Token::DecDotNum(<&'input str>),
        HEX_NUM             => Token::HexNum(<&'input str>),
        OCT_NUM             => Token::OctNum(<&'input str>),
        BIN_NUM             => Token::BinNum(<&'input str>),

        IF                  => Token::If,
        ELSE                => Token::Else,
        FOR                 => Token::For,
        WHILE               => Token::While,
        UNTIL               => Token::Until,
        DO                  => Token::Do,
        IN                  => Token::In,
        RET                 => Token::Ret,
        INT                 => Token::Int,
        UINT                => Token::Uint,
        FLOAT               => Token::Float,
        DOUBLE              => Token::Double,
        BYTE                => Token::Byte,
        BOOL                => Token::Bool,
        TRUE                => Token::True,
        FALSE               => Token::False,

        INCR                => Token::Incr,
        DECR                => Token::Decr,
        PLUS                => Token::Plus,
        MINUS               => Token::Minus,
        MULT                => Token::Mult,
        DIV                 => Token::Div,
        REM                 => Token::Rem,
        EQUALS              => Token::Equals,
        NOT_EQUALS          => Token::NotEquals,
        LESS                => Token::Less,
        LESS_EQ             => Token::LessEq,
        GREATER             => Token::Greater,
        GREATER_EQ          => Token::GreaterEq,
        AND                 => Token::And,
        OR                  => Token::Or,
        NOT                 => Token::Not,
        BIT_AND             => Token::BitAnd,
        BIT_OR              => Token::BitOr,
        BIT_XOR             => Token::BitXor,
        BIT_NOT             => Token::BitNot,
        SHIFT_LEFT          => Token::ShiftLeft,
        SHIFT_RIGHT         => Token::ShiftRight,
        ASSIGN              => Token::Assign,
        ADD_ASSIGN          => Token::AddAssign,
        SUB_ASSIGN          => Token::SubAssign,
        MUL_ASSIGN          => Token::MulAssign,
        DIV_ASSIGN          => Token::DivAssign,
        REM_ASSIGN          => Token::RemAssign,
        BIT_AND_ASSIGN      => Token::BitAndAssign,
        BIT_OR_ASSIGN       => Token::BitOrAssign,
        BIT_XOR_ASSIGN      => Token::BitXorAssign,
        SHIFT_LEFT_ASSIGN   => Token::ShiftLeftAssign,
        SHIFT_RIGHT_ASSIGN  => Token::ShiftRightAssign,

        SEMI                => Token::Semicolon,
        COMMA               => Token::Comma,
        DOT                 => Token::Dot,
        COLON               => Token::Colon,
        "("                 => Token::LParen,
        ")"                 => Token::RParen,
        "{"                 => Token::LBrace,
        "}"                 => Token::RBrace,
        "["                 => Token::LBracket,
        "]"                 => Token::RBracket,
        BACKSLASH           => Token::Backslash,
        QUESTION            => Token::Question,
        AT                  => Token::At,
        HASH                => Token::Hash,
        DOLLAR              => Token::Dollar,
    }
}
